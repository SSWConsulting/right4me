// this is file generated by hitting the /swagger/ng2 endpoint
/* tslint: disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.0.6156.29525 (NJsonSchema v5.16.6156.29215) (http://NSwag.org)
// </auto-generated>
//----------------------
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("rxjs/Rx");
var Observable_1 = require("rxjs/Observable");
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
exports.API_BASE_URL = new core_1.OpaqueToken('API_BASE_URL');
var AccessibilityNeedsClient = (function () {
    function AccessibilityNeedsClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    AccessibilityNeedsClient.prototype.get = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/AccessibilityNeeds";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processGet(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processGet(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    AccessibilityNeedsClient.prototype.processGet = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return AccessibilityNeedsClient;
}());
AccessibilityNeedsClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], AccessibilityNeedsClient);
exports.AccessibilityNeedsClient = AccessibilityNeedsClient;
var LoginClient = (function () {
    function LoginClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    LoginClient.prototype.login = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/login";
        var content_ = JSON.stringify(model);
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processLogin(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processLogin(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    LoginClient.prototype.processLogin = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    LoginClient.prototype.testLogin = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/usercheck";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processTestLogin(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processTestLogin(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    LoginClient.prototype.processTestLogin = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    LoginClient.prototype.logout = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/logout";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processLogout(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processLogout(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    LoginClient.prototype.processLogout = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return LoginClient;
}());
LoginClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], LoginClient);
exports.LoginClient = LoginClient;
var ProductClient = (function () {
    function ProductClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    ProductClient.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/product?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processGet(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processGet(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ProductClient.prototype.processGet = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    ProductClient.prototype.post = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/product";
        var content_ = JSON.stringify(model);
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processPost(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processPost(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ProductClient.prototype.processPost = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    ProductClient.prototype.getByCategory = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/product/category/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processGetByCategory(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processGetByCategory(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ProductClient.prototype.processGetByCategory = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return ProductClient;
}());
ProductClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], ProductClient);
exports.ProductClient = ProductClient;
var RegisterClient = (function () {
    function RegisterClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    RegisterClient.prototype.register = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/register";
        var content_ = JSON.stringify(model);
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processRegister(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processRegister(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    RegisterClient.prototype.processRegister = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return RegisterClient;
}());
RegisterClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], RegisterClient);
exports.RegisterClient = RegisterClient;
var ReviewClient = (function () {
    function ReviewClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    ReviewClient.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Review/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processGet(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processGet(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ReviewClient.prototype.processGet = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    ReviewClient.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Review/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processDelete(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processDelete(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ReviewClient.prototype.processDelete = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "204") {
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    ReviewClient.prototype.post = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Review";
        var content_ = JSON.stringify(model);
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processPost(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processPost(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    ReviewClient.prototype.processPost = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return ReviewClient;
}());
ReviewClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], ReviewClient);
exports.ReviewClient = ReviewClient;
var TestEfClient = (function () {
    function TestEfClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    TestEfClient.prototype.testValues = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/TestEf/TestValues";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processTestValues(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processTestValues(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(e);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    TestEfClient.prototype.processTestValues = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return TestEfClient;
}());
TestEfClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], TestEfClient);
exports.TestEfClient = TestEfClient;
var UserProfileClient = (function () {
    function UserProfileClient(http, baseUrl) {
        this.http = null;
        this.baseUrl = undefined;
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    UserProfileClient.prototype.userProfile = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/UserProfile";
        var content_ = "";
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processUserProfile(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processUserProfile(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    UserProfileClient.prototype.processUserProfile = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    UserProfileClient.prototype.updateUserProfile = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/UpdateUserProfile";
        var content_ = JSON.stringify(model);
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new http_1.Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map(function (response) {
            return _this.processUpdateUserProfile(response);
        }).catch(function (response, caught) {
            if (response instanceof http_1.Response) {
                try {
                    return Observable_1.Observable.of(_this.processUpdateUserProfile(response));
                }
                catch (e) {
                    return Observable_1.Observable.throw(response);
                }
            }
            else
                return Observable_1.Observable.throw(response);
        });
    };
    UserProfileClient.prototype.processUpdateUserProfile = function (response) {
        var data = response.text();
        var status = response.status.toString();
        if (status === "200") {
            var result200 = null;
            result200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else {
            throw new Error("error_no_callback_for_the_received_http_status");
        }
    };
    return UserProfileClient;
}());
UserProfileClient = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(http_1.Http)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
    __metadata("design:paramtypes", [http_1.Http, String])
], UserProfileClient);
exports.UserProfileClient = UserProfileClient;
var ProductCategory;
(function (ProductCategory) {
    ProductCategory[ProductCategory["Clothes"] = 1] = "Clothes";
    ProductCategory[ProductCategory["Technology"] = 2] = "Technology";
    ProductCategory[ProductCategory["Furniture"] = 3] = "Furniture";
})(ProductCategory = exports.ProductCategory || (exports.ProductCategory = {}));
//# sourceMappingURL=Right4MeClient.js.map