using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Hosting.Internal;
using Microsoft.AspNetCore.Mvc;
using NJsonSchema;
using NJsonSchema.CodeGeneration.TypeScript;
using NSwag;
using NSwag.Annotations;
using NSwag.CodeGeneration.CodeGenerators.TypeScript;
using NSwag.CodeGeneration.SwaggerGenerators.WebApi;
using SSW.Right4Me.Web.Models;

namespace SSW.Right4Me.Web.Controllers
{
    [SwaggerIgnore]
    public class Ng2GenerateController : Controller
    {

        private IHostingEnvironment _env;

        public Ng2GenerateController(IHostingEnvironment env)
        {
            _env = env;
        }

        [Route("/swagger/ng2")]
        [AllowAnonymous]
        public IActionResult Generate()
        {
            var settings = new WebApiToSwaggerGeneratorSettings
            {
                DefaultUrlTemplate = "api/{controller}/{action}/{id}",
                DefaultPropertyNameHandling = PropertyNameHandling.CamelCase
                
            };
            var generator = new WebApiToSwaggerGenerator(settings);
            var controllers = typeof(Ng2GenerateController).GetTypeInfo().Assembly.GetTypes()
                .Where(t => typeof(Controller).IsAssignableFrom(t))
                .ToList();
            var document = generator.GenerateForControllers(controllers);

            //var json = document.ToJson();
            //return Content(document.ToJson());

            var typescriptGeneratorSettings = new SwaggerToTypeScriptClientGeneratorSettings()
            {
                ClassName = "{controller}Client",
                Template = TypeScriptTemplate.Angular2,
                GenerateClientClasses = true,
                GenerateClientInterfaces = true,
                GenerateDtoTypes = true,

                TypeScriptGeneratorSettings = new TypeScriptGeneratorSettings()
                {
                    TypeStyle = TypeScriptTypeStyle.Interface,
                    
                    //TypeNameGenerator = new MyTypeNameGenerator(),
                }
            };

            

            var tsGenerator = new SwaggerToTypeScriptClientGenerator(document, typescriptGeneratorSettings);
            var typescript = tsGenerator.GenerateFile();

            typescript = @"
// this is file generated by hitting the /swagger/ng2 endpoint
" + typescript;

            // hack!
            typescript = typescript.Replace("return <Observable<any>><any>Observable.throw(e);",
                "return <Observable<any>><any>Observable.throw(response);");

            typescript = typescript.Replace("return <Observable<UserProfileVm>><any>Observable.throw(e)",
                "return <Observable<any>><any>Observable.throw(response)");

            // write typescript to file under ng app
            var webRoot = _env.WebRootPath;
            var file = System.IO.Path.Combine(webRoot, @"..\ClientApp\app\Right4MeClient.ts");
            System.IO.File.WriteAllText(file, typescript);

            return Content(typescript);
        }


    }

    public class MyTypeNameGenerator : ITypeNameGenerator
    {
        public string Generate(JsonSchema4 schema, string typeNameHint)
        {
            return schema.TypeNameRaw
                .Replace(".", "_")
                .Replace("[]", "");
        }
    }


}
